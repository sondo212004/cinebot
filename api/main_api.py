from fastapi import FastAPI, Request
from pydantic import BaseModel
from fastapi.responses import StreamingResponse, JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi import HTTPException
from typing import AsyncGenerator
import sys
import os
import json
import uuid

# Th√™m ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c src v√†o Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, ".."))
src_dir = os.path.join(project_root, "src")
sys.path.append(src_dir)

from chatbot_engine import ChatbotEngine


app = FastAPI()
engine = ChatbotEngine()

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ho·∫∑c ["http://localhost:3000"] n·∫øu b·∫°n d√πng frontend c·ª• th·ªÉ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    message: str
    session_id: str = "default_session"

app.mount("/ui", StaticFiles(directory="ui"), name="ui")

@app.get("/chatbot-ui")
def get_chatbot_ui():
    return FileResponse("ui/chatbot_ui.html")

@app.get("/")
def root():
    return {"message": "CineBot API ƒëang ho·∫°t ƒë·ªông üé¨"}

@app.post("/chat")
def chat(request: ChatRequest):
    response = engine.get_response(request.message, request.session_id)
    return {"response": response}

@app.post("/chat/stream")
async def stream_chat(request: ChatRequest):
    """
    Endpoint ƒë·ªÉ stream ph·∫£n h·ªìi t·ª´ chatbot.
    """
    session_id = request.session_id if request.session_id else str(uuid.uuid4())

    if not hasattr(engine, 'app'):
        raise HTTPException(status_code=500, detail="ChatbotEngine ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng ki·ªÉm tra log.")

    async def generate_response_chunks() -> AsyncGenerator[str, None]:
        try:
            async for chunk_content in engine.stream_response(request.message, session_id):
                # G√≥i n·ªôi dung v√†o m·ªôt ƒë·ªëi t∆∞·ª£ng JSON v√† g·ª≠i ƒëi
                yield f"data: {json.dumps({'content': chunk_content})}\n\n"
        except Exception as e:
            # X·ª≠ l√Ω l·ªói v√† g·ª≠i th√¥ng b√°o l·ªói JSON
            yield f"data: {json.dumps({'error': str(e)})}\n\n"
        finally:
            yield "data: [DONE]\n\n" # B√°o hi·ªáu k·∫øt th√∫c stream

    return StreamingResponse(generate_response_chunks(), media_type="text/event-stream")

@app.get("/history/{session_id}")
def get_history(session_id: str):
    messages = engine.get_conversation_history(session_id)
    return JSONResponse([
        {"role":type(msg).__name__.replace("Message", "").lower(), "content": msg.content}
        for msg in messages
    ])

@app.delete("/history/{session_id}")
def delete_history(session_id: str):
    return {"message": engine.clear_conversation(session_id) or "L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a."}

