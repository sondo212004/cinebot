from playwright.sync_api import sync_playwright
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import re
import time
import json

from typing import List, Dict, Optional
from pydantic import BaseModel, Field
from langchain.tools import StructuredTool


# ‚úÖ Khai b√°o schema input d√πng Pydantic
class CinemaShowtimesInput(BaseModel):
    specific_cinema_url: str = Field(..., description="URL trang l·ªãch chi·∫øu c·ªßa r·∫°p phim")
    name: str = Field(..., description="T√™n r·∫°p phim")
    location: str = Field(..., description="ƒê·ªãa ƒëi·ªÉm c·ªßa r·∫°p phim")
    source_url: Optional[str] = Field(None, description="URL ngu·ªìn (th∆∞·ªùng gi·ªëng v·ªõi specific_cinema_url)")


# ‚úÖ H√†m tr√≠ch xu·∫•t HTML
def extract_schedules_from_html(soup, date_str):
    movies_data = []
    label_blocks = soup.select('.film-label')
    print(f"üîé T√¨m th·∫•y {len(label_blocks)} phim (film-label).")

    for label_div in label_blocks:
        try:
            title_elem = label_div.select_one('h3 a')
            if not title_elem:
                continue
            title = title_elem.get_text(strip=True)

            film_right_div = label_div.find_next_sibling('div', class_='film-right')
            if not film_right_div:
                continue

            showtime_elems = film_right_div.select('.film-showtimes li.item a span')
            showtimes = []
            for elem in showtime_elems:
                time_text = elem.get_text(strip=True)
                found_time = re.search(r'\d{1,2}:\d{2}', time_text)
                if found_time:
                    showtimes.append(found_time.group(0))

            if showtimes:
                unique_showtimes = sorted(list(set(showtimes)))
                movies_data.append({
                    'title': title,
                    'date': date_str,
                    'showtimes': unique_showtimes
                })
                print(f"  üé¨ {title}: {', '.join(unique_showtimes)}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω phim: {e}")
            continue

    return movies_data


# ‚úÖ Tool ch√≠nh (h√†m ph·∫£i nh·∫≠n 1 ƒë·ªëi t∆∞·ª£ng Pydantic)
def scrape_cinema_showtimes_playwright(input_data: CinemaShowtimesInput) -> dict:
    """
    L·∫•y l·ªãch chi·∫øu phim t·ª´ m·ªôt trang r·∫°p c·ª• th·ªÉ (CGV, Lotte...) trong 5 ng√†y t·ªõi.

    Args:
        input_data (CinemaShowtimesInput): Th√¥ng tin bao g·ªìm URL, t√™n, v·ªã tr√≠ r·∫°p v√† ngu·ªìn.

    Returns:
        dict: Bao g·ªìm th√¥ng tin r·∫°p, th·ªùi gian scrape v√† l·ªãch chi·∫øu phim.
    """
    all_schedules = []

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            viewport={"width": 1280, "height": 800}
        )
        page = context.new_page()

        try:
            print(f"\nüöÄ B·∫Øt ƒë·∫ßu scraping cho: {input_data.name}")
            print(f"üîó URL: {input_data.specific_cinema_url}")
            page.goto(input_data.specific_cinema_url, timeout=15000)
            page.wait_for_selector("body", timeout=5000)

            for i in range(5):
                current_date = datetime.now() + timedelta(days=i)
                date_str = current_date.strftime('%Y%m%d')
                display_date = current_date.strftime('%Y-%m-%d')
                print(f"\nüóìÔ∏è ƒêang x·ª≠ l√Ω ng√†y: {display_date}")

                if i > 0:
                    try:
                        cgv_date_id = f"cgv{date_str}"
                        selector = f"#{cgv_date_id}"
                        page.click(selector, timeout=5000)
                        print(f"  ‚úÖ Clicked tab ng√†y b·∫±ng ID: {cgv_date_id}")
                        time.sleep(2)
                    except Exception:
                        print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tab ng√†y ƒë·ªÉ click.")
                        break

                html = page.content()
                soup = BeautifulSoup(html, 'html.parser')
                schedules_for_date = extract_schedules_from_html(soup, date_str)

                if schedules_for_date:
                    all_schedules.extend(schedules_for_date)
                else:
                    print("  ‚ùå Kh√¥ng t√¨m th·∫•y l·ªãch chi·∫øu cho ng√†y n√†y.")

            final_movies = {}
            for schedule in all_schedules:
                title = schedule['title']
                if title not in final_movies:
                    final_movies[title] = {'dates': {}}
                date = schedule['date']
                final_movies[title]['dates'][date] = schedule['showtimes']

            result_list = [{'title': title, **data} for title, data in final_movies.items()]
            print(f"\nüéâ Ho√†n th√†nh! T√¨m th·∫•y {len(result_list)} phim c√≥ l·ªãch chi·∫øu.")

            return {
                'status': 'success',
                'cinema_info': {
                    'name': input_data.name,
                    'location': input_data.location,
                    'source_url': input_data.source_url or input_data.specific_cinema_url
                },
                'scrape_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'schedules': result_list
            }

        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh scraping: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'cinema_info': {
                    'name': input_data.name,
                    'location': input_data.location,
                    'source_url': input_data.source_url or input_data.specific_cinema_url
                }
            }
        finally:
            browser.close()
            print("üîê ƒê√£ ƒë√≥ng tr√¨nh duy·ªát.")


# ‚úÖ ƒê·ªãnh nghƒ©a StructuredTool t∆∞∆°ng th√≠ch LangGraph Agent
cinema_showtimes_tool = StructuredTool.from_function(
    name="ScrapeCinemaShowtimes",
    func=scrape_cinema_showtimes_playwright,
    description=(
        "D√πng ƒë·ªÉ l·∫•y l·ªãch chi·∫øu phim t·ª´ m·ªôt r·∫°p c·ª• th·ªÉ trong 5 ng√†y t·ªõi. "
        "C·∫ßn cung c·∫•p URL c·ªßa trang l·ªãch chi·∫øu v√† th√¥ng tin r·∫°p (t√™n, ƒë·ªãa ch·ªâ). "
        "Tr·∫£ v·ªÅ danh s√°ch c√°c b·ªô phim, th·ªùi gian chi·∫øu v√† th√¥ng tin r·∫°p."
    ),
    args_schema=CinemaShowtimesInput
)

# ‚úÖ Test n·∫øu ch·∫°y ƒë·ªôc l·∫≠p
if __name__ == '__main__':
    input_data = CinemaShowtimesInput(
        specific_cinema_url='https://www.cgv.vn/default/cinox/site/cgv-vincom-center-ba-trieu/',
        name='CGV Vincom Center B√† Tri·ªáu',
        location='H√† N·ªôi',
        source_url='https://www.cgv.vn/default/cinox/site/cgv-vincom-center-ba-trieu/'
    )

    result = scrape_cinema_showtimes_playwright(input_data)
    print("\n" + "="*50)
    print("K·∫æT QU·∫¢ CU·ªêI C√ôNG")
    print("="*50)
    print(json.dumps(result, indent=4, ensure_ascii=False))
